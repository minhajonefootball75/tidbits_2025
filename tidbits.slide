Acceptance Tests: Why, What and How?

Minhaj Uddin Khan
The Source Team 

* Agenda

For what purpose is this enormous gathering

- Why Acceptance Tests?
- What are they even?
- How do you write one?
- Live Coding (yes, not vibe)

* 1. The Why

* 1.1. Why aren't unit tests enough

Even though the units are fully tested, one cannot say that those 
tested units will work together as expected.



.image meme.jpg _ 450


* 1.2. Manual testing is HARD

Firstly, manual testing is not fun.

Secondly, setting up all the dependencies locally to run everything is not fun either.

Even though if we use the production environment, there are certain actions we cannot simply do on production (publishing an article, etc)


* 1.3. Manual testing is HARDER with workers and cronjobs

Imagine waiting for the _right_ event to be consumed by your worker.

Imagine setting up the _right_ data configurations in your database every time
you run the cronjob locally.

* 2. The What
* 2. Enter Acceptance Tests

- Tests that verify the system works as a whole in a production-like environment

- Predictable external environment


* 2.1. Anatomy of an Acceptance Test

.image dave_farley.png 
.caption https://continuous-delivery.co.uk/downloads/ATDD%20Guide%2026-03-21.pdf

* 2.1. Test Specification


Test Specification is a document that describes the expected behavior of the system from an external user's perspective.

.code testing_spec.go /START OMIT/,/END OMIT/
* 2.2. DSL

The DSL is shared between test-cases. It is designed to make it easy to write Test Cases. It should allow
precision, where precision is need to express a test and skim over detail where it is not. 

.code dsl_usage.go

* 2.3. Protocol Driver

Protocol Driver is a piece of code that simulates the external user, sending requests to the system and verifying responses.

.code protocol_driver.go


* 2.4. Stub Infrastructure

- Database Migrations 
- Seed Data _(e.g,_ _authors_,_content_providers_etc)_
- Mocked External Dependencies _(Funtik_,_EventBus,_etc.)_

* 2.5. System Under Test


This is the application you are testing.

- API servers
- Workers
- Cronjobs

_NOTE:_all_of_these_talk_to_the_stub_external_dependencies_

* 3. The How 

* 3.1. How do we run these tests?

A simple `make` target that:

- Spins up the database with correct tables and seeded data

- Spins up the mocked external dependencies (e,g, AWS LocalStack, Mockoon API)

- Spins up all the applications in the monorepo and waits for them to be ready through health checks

- Runs the acceptance tests against the applications


* 4. How has this helped us?

* 4.1 Debug Time



We do not need to wait for the *right* article to arrive from the event bus to verify if all works as expected for the translator worker.



It is quicker to prepare the data to run cronjobs for crawling instead of doing it over and over manually.


* 4.2 Bug Fixes

_eg:_ We found configurations error that the unit tests couldn't catch for us _(because_they_are_mocked_over_there)_.

_eg:_ We are able to test if our routes require the right permissions with acceptance test; something undoable through unit testing as the routes sits in the `main.go` file.


* 4.3 Developer Experience

Made it easy to test edge cases in a prod-like environment.
Made it easy to contribute to legacy parts of the codebase

All in all, an improved developer experience. _(atleast_compared_to_explaining_the_problem_to_AI_for_30_minutes)_
